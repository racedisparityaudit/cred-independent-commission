// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"
	"time"

	"code.cloudfoundry.org/go-loggregator/rpc/loggregator_v2"
	logcache "code.cloudfoundry.org/log-cache/pkg/client"
	"github.com/alphagov/paas-prometheus-exporter/cf"
)

type FakeLogCacheClient struct {
	ReadStub        func(ctx context.Context, sourceID string, start time.Time, opts ...logcache.ReadOption) ([]*loggregator_v2.Envelope, error)
	readMutex       sync.RWMutex
	readArgsForCall []struct {
		ctx      context.Context
		sourceID string
		start    time.Time
		opts     []logcache.ReadOption
	}
	readReturns struct {
		result1 []*loggregator_v2.Envelope
		result2 error
	}
	readReturnsOnCall map[int]struct {
		result1 []*loggregator_v2.Envelope
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLogCacheClient) Read(ctx context.Context, sourceID string, start time.Time, opts ...logcache.ReadOption) ([]*loggregator_v2.Envelope, error) {
	fake.readMutex.Lock()
	ret, specificReturn := fake.readReturnsOnCall[len(fake.readArgsForCall)]
	fake.readArgsForCall = append(fake.readArgsForCall, struct {
		ctx      context.Context
		sourceID string
		start    time.Time
		opts     []logcache.ReadOption
	}{ctx, sourceID, start, opts})
	fake.recordInvocation("Read", []interface{}{ctx, sourceID, start, opts})
	fake.readMutex.Unlock()
	if fake.ReadStub != nil {
		return fake.ReadStub(ctx, sourceID, start, opts...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.readReturns.result1, fake.readReturns.result2
}

func (fake *FakeLogCacheClient) ReadCallCount() int {
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	return len(fake.readArgsForCall)
}

func (fake *FakeLogCacheClient) ReadArgsForCall(i int) (context.Context, string, time.Time, []logcache.ReadOption) {
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	return fake.readArgsForCall[i].ctx, fake.readArgsForCall[i].sourceID, fake.readArgsForCall[i].start, fake.readArgsForCall[i].opts
}

func (fake *FakeLogCacheClient) ReadReturns(result1 []*loggregator_v2.Envelope, result2 error) {
	fake.ReadStub = nil
	fake.readReturns = struct {
		result1 []*loggregator_v2.Envelope
		result2 error
	}{result1, result2}
}

func (fake *FakeLogCacheClient) ReadReturnsOnCall(i int, result1 []*loggregator_v2.Envelope, result2 error) {
	fake.ReadStub = nil
	if fake.readReturnsOnCall == nil {
		fake.readReturnsOnCall = make(map[int]struct {
			result1 []*loggregator_v2.Envelope
			result2 error
		})
	}
	fake.readReturnsOnCall[i] = struct {
		result1 []*loggregator_v2.Envelope
		result2 error
	}{result1, result2}
}

func (fake *FakeLogCacheClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLogCacheClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cf.LogCacheClient = new(FakeLogCacheClient)
